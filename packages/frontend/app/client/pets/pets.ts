/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";
import type {
	Error,
	ListPetsParams,
	Pet,
	Pets,
	ShowPetByIdParams,
	ShowPetByIdPathParameters,
} from ".././models";

/**
 * @summary List all pets
 */
export const getListPetsUrl = (params?: ListPetsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	return normalizedParams.size
		? `${import.meta.env.VITE_API_BASE_URL || ""}/pets?${normalizedParams.toString()}`
		: `${import.meta.env.VITE_API_BASE_URL || ""}/pets`;
};

export const listPets = async (
	params?: ListPetsParams,
	options?: RequestInit,
): Promise<Pets> => {
	const res = await fetch(getListPetsUrl(params), {
		...options,
		method: "GET",
	});
	const data = await res.json();

	return data as Pets;
};

export const getListPetsKey = (params?: ListPetsParams) =>
	[
		`${import.meta.env.VITE_API_BASE_URL || ""}/pets`,
		...(params ? [params] : []),
	] as const;

export type ListPetsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsQueryError = Promise<Error>;

/**
 * @summary List all pets
 */
export const useListPets = <TError = Promise<Error>>(
	params?: ListPetsParams,
	options?: {
		swr?: SWRConfiguration<Awaited<ReturnType<typeof listPets>>, TError> & {
			swrKey?: Key;
			enabled?: boolean;
		};
		fetch?: RequestInit;
	},
) => {
	const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getListPetsKey(params) : null));
	const swrFn = () => listPets(params, fetchOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};
/**
 * @summary Create a pet
 */
export const getCreatePetsUrl = () => {
	return `${import.meta.env.VITE_API_BASE_URL || ""}/pets`;
};

export const createPets = async (
	pets: Pets,
	options?: RequestInit,
): Promise<void> => {
	const res = await fetch(getCreatePetsUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(pets),
	});
	const data = await res.json();

	return data as void;
};

export const getCreatePetsMutationFetcher = (options?: RequestInit) => {
	return (_: Key, { arg }: { arg: Pets }): Promise<void> => {
		return createPets(arg, options);
	};
};
export const getCreatePetsMutationKey = () =>
	[`${import.meta.env.VITE_API_BASE_URL || ""}/pets`] as const;

export type CreatePetsMutationResult = NonNullable<
	Awaited<ReturnType<typeof createPets>>
>;
export type CreatePetsMutationError = Promise<Error>;

/**
 * @summary Create a pet
 */
export const useCreatePets = <TError = Promise<Error>>(options?: {
	swr?: SWRMutationConfiguration<
		Awaited<ReturnType<typeof createPets>>,
		TError,
		Key,
		Pets,
		Awaited<ReturnType<typeof createPets>>
	> & { swrKey?: string };
	fetch?: RequestInit;
}) => {
	const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getCreatePetsMutationKey();
	const swrFn = getCreatePetsMutationFetcher(fetchOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};
/**
 * @summary Info for a specific pet
 */
export const getShowPetByIdUrl = (
	{ petId }: ShowPetByIdPathParameters,
	params: ShowPetByIdParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	return normalizedParams.size
		? `${import.meta.env.VITE_API_BASE_URL || ""}/pets/${petId}?${normalizedParams.toString()}`
		: `${import.meta.env.VITE_API_BASE_URL || ""}/pets/${petId}`;
};

export const showPetById = async (
	{ petId }: ShowPetByIdPathParameters,
	params: ShowPetByIdParams,
	options?: RequestInit,
): Promise<Pet> => {
	const res = await fetch(getShowPetByIdUrl({ petId }, params), {
		...options,
		method: "GET",
	});
	const data = await res.json();

	return data as Pet;
};

export const getShowPetByIdKey = (
	{ petId }: ShowPetByIdPathParameters,
	params: ShowPetByIdParams,
) =>
	[
		`${import.meta.env.VITE_API_BASE_URL || ""}/pets/${petId}`,
		...(params ? [params] : []),
	] as const;

export type ShowPetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdQueryError = Promise<Error>;

/**
 * @summary Info for a specific pet
 */
export const useShowPetById = <TError = Promise<Error>>(
	{ petId }: ShowPetByIdPathParameters,
	params: ShowPetByIdParams,
	options?: {
		swr?: SWRConfiguration<Awaited<ReturnType<typeof showPetById>>, TError> & {
			swrKey?: Key;
			enabled?: boolean;
		};
		fetch?: RequestInit;
	},
) => {
	const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!petId;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getShowPetByIdKey({ petId }, params) : null));
	const swrFn = () => showPetById({ petId }, params, fetchOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};
